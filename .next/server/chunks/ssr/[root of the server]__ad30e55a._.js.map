{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/vladislavostapenko/Documents/GitHub/Lab_01_Next/components/ui/color-mode.tsx"],"sourcesContent":["'use client'\n\nimport type { IconButtonProps, SpanProps } from '@chakra-ui/react'\nimport { ClientOnly, IconButton, Skeleton, Span } from '@chakra-ui/react'\nimport { ThemeProvider, useTheme } from 'next-themes'\nimport type { ThemeProviderProps } from 'next-themes'\nimport * as React from 'react'\nimport { LuMoon, LuSun } from 'react-icons/lu'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ColorModeProviderProps extends ThemeProviderProps {}\n\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  return (\n    <ThemeProvider attribute='class' disableTransitionOnChange {...props} />\n  )\n}\n\nexport type ColorMode = 'light' | 'dark'\n\nexport interface UseColorModeReturn {\n  colorMode: ColorMode\n  setColorMode: (colorMode: ColorMode) => void\n  toggleColorMode: () => void\n}\n\nexport function useColorMode(): UseColorModeReturn {\n  const { resolvedTheme, setTheme } = useTheme()\n  const toggleColorMode = () => {\n    setTheme(resolvedTheme === 'dark' ? 'light' : 'dark')\n  }\n  return {\n    colorMode: resolvedTheme as ColorMode,\n    setColorMode: setTheme,\n    toggleColorMode\n  }\n}\n\nexport function useColorModeValue<T>(light: T, dark: T) {\n  const { colorMode } = useColorMode()\n  return colorMode === 'dark' ? dark : light\n}\n\nexport function ColorModeIcon() {\n  const { colorMode } = useColorMode()\n  return colorMode === 'dark' ? <LuMoon /> : <LuSun />\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\ninterface ColorModeButtonProps extends Omit<IconButtonProps, 'aria-label'> {}\n\nexport const ColorModeButton = React.forwardRef<\n  HTMLButtonElement,\n  ColorModeButtonProps\n>(function ColorModeButton(props, ref) {\n  const { toggleColorMode } = useColorMode()\n  return (\n    <ClientOnly fallback={<Skeleton boxSize='8' />}>\n      <IconButton\n        onClick={toggleColorMode}\n        variant='ghost'\n        aria-label='Toggle color mode'\n        size='sm'\n        ref={ref}\n        {...props}\n        css={{\n          _icon: {\n            width: '5',\n            height: '5'\n          }\n        }}\n      >\n        <ColorModeIcon />\n      </IconButton>\n    </ClientOnly>\n  )\n})\n\nexport const LightMode = React.forwardRef<HTMLSpanElement, SpanProps>(\n  function LightMode(props, ref) {\n    return (\n      <Span\n        color='fg'\n        display='contents'\n        className='chakra-theme light'\n        colorPalette='gray'\n        colorScheme='light'\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\n\nexport const DarkMode = React.forwardRef<HTMLSpanElement, SpanProps>(\n  function DarkMode(props, ref) {\n    return (\n      <Span\n        color='fg'\n        display='contents'\n        className='chakra-theme dark'\n        colorPalette='gray'\n        colorScheme='dark'\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\n"],"names":[],"mappings":";;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAYO,SAAS,kBAAkB,KAA6B;IAC7D,qBACE,8OAAC,gJAAA,CAAA,gBAAa;QAAC,WAAU;QAAQ,yBAAyB;QAAE,GAAG,KAAK;;;;;;AAExE;AAUO,SAAS;IACd,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,gJAAA,CAAA,WAAQ,AAAD;IAC3C,MAAM,kBAAkB;QACtB,SAAS,kBAAkB,SAAS,UAAU;IAChD;IACA,OAAO;QACL,WAAW;QACX,cAAc;QACd;IACF;AACF;AAEO,SAAS,kBAAqB,KAAQ,EAAE,IAAO;IACpD,MAAM,EAAE,SAAS,EAAE,GAAG;IACtB,OAAO,cAAc,SAAS,OAAO;AACvC;AAEO,SAAS;IACd,MAAM,EAAE,SAAS,EAAE,GAAG;IACtB,OAAO,cAAc,uBAAS,8OAAC,8IAAA,CAAA,SAAM;;;;6BAAM,8OAAC,8IAAA,CAAA,QAAK;;;;;AACnD;AAKO,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5C,SAAS,gBAAgB,KAAK,EAAE,GAAG;IACnC,MAAM,EAAE,eAAe,EAAE,GAAG;IAC5B,qBACE,8OAAC,wMAAA,CAAA,aAAU;QAAC,wBAAU,8OAAC,4LAAA,CAAA,WAAQ;YAAC,SAAQ;;;;;;kBACtC,cAAA,8OAAC,gMAAA,CAAA,aAAU;YACT,SAAS;YACT,SAAQ;YACR,cAAW;YACX,MAAK;YACL,KAAK;YACJ,GAAG,KAAK;YACT,KAAK;gBACH,OAAO;oBACL,OAAO;oBACP,QAAQ;gBACV;YACF;sBAEA,cAAA,8OAAC;;;;;;;;;;;;;;;AAIT;AAEO,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EACtC,SAAS,UAAU,KAAK,EAAE,GAAG;IAC3B,qBACE,8OAAC,mLAAA,CAAA,OAAI;QACH,OAAM;QACN,SAAQ;QACR,WAAU;QACV,cAAa;QACb,aAAY;QACZ,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAGK,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EACrC,SAAS,SAAS,KAAK,EAAE,GAAG;IAC1B,qBACE,8OAAC,mLAAA,CAAA,OAAI;QACH,OAAM;QACN,SAAQ;QACR,WAAU;QACV,cAAa;QACb,aAAY;QACZ,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/vladislavostapenko/Documents/GitHub/Lab_01_Next/components/ui/provider.tsx"],"sourcesContent":["\"use client\"\n\nimport { ChakraProvider, defaultSystem } from \"@chakra-ui/react\"\nimport {\n  ColorModeProvider,\n  type ColorModeProviderProps,\n} from \"./color-mode\"\n\nexport function Provider(props: ColorModeProviderProps) {\n  return (\n    <ChakraProvider value={defaultSystem}>\n      <ColorModeProvider {...props} />\n    </ChakraProvider>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;AAHA;;;;AAQO,SAAS,SAAS,KAA6B;IACpD,qBACE,8OAAC,sLAAA,CAAA,iBAAc;QAAC,OAAO,gKAAA,CAAA,gBAAa;kBAClC,cAAA,8OAAC,kIAAA,CAAA,oBAAiB;YAAE,GAAG,KAAK;;;;;;;;;;;AAGlC","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}